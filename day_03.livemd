# Day 3

## Star 5

The engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can add up all the part numbers in the engine schematic, it should be easy to work out which part is missing.

The engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don't really understand, but apparently any number adjacent to a symbol, even diagonally, is a "part number" and should be included in your sum. (Periods (.) do not count as a symbol.)

Here is an example engine schematic:

```
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
```

In this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.

Of course, the actual engine schematic is much larger. What is the sum of all of the part numbers in the engine schematic?

```elixir
defmodule Day3Star1 do
  def is_integer?(str) do
    case Integer.parse(str) do
      {_, _} -> true
      _else -> false
    end
  end

  def borders_special_char(input, line_number, begin_cell, end_cell) do
    [
      input |> extract_line(line_number - 1) |> extract_cells(begin_cell, end_cell),
      input |> extract_line(line_number) |> extract_cells(begin_cell, end_cell),
      input |> extract_line(line_number + 1) |> extract_cells(begin_cell, end_cell)
    ]
    |> List.flatten()
    |> Enum.join()
    |> then(&Regex.match?(~r/[^0-9|\.]/, &1))
  end

  defp extract_line(_input, line_number) when line_number < 0, do: []
  defp extract_line(input, line_number) when line_number > length(input), do: []
  defp extract_line(input, line_number), do: Enum.at(input, line_number)

  defp extract_cells(nil, _begin_cell, _end_cell), do: []

  defp extract_cells(line, begin_cell, end_cell) do
    Enum.slice(line, max(0, begin_cell - 1)..end_cell)
  end
end

input =
  "input_day_3_1.txt"
  |> File.read!()
  |> String.split("\n")
  |> Enum.drop(-1)
  |> Enum.map(fn line ->
    line
    |> String.split("")
    |> Enum.slice(1..-2)
  end)

input
|> Enum.with_index()
|> Enum.map(fn {line, line_index} ->
  line
  |> Enum.with_index()
  |> Enum.reduce({0, ""}, fn {cell, cell_index}, {line_sum, cur_num} = acc ->
    cond do
      Day3Star1.is_integer?(cell) ->
        {line_sum, cur_num <> cell}

      cur_num != "" ->
        {full_num, _} = Integer.parse(cur_num)

        if Day3Star1.borders_special_char(
             input,
             line_index,
             cell_index - String.length(cur_num),
             cell_index
           ) do
          {line_sum + full_num, ""}
        else
          {line_sum, ""}
        end

      true ->
        acc
    end
  end)
end)
|> Enum.with_index()
|> Enum.map(fn
  {{line_sum, ""}, _line_index} ->
    line_sum

  {{line_sum, cur_num}, line_index} ->
    {full_num, _} = Integer.parse(cur_num)

    if Day3Star1.borders_special_char(
         input,
         line_index,
         length(Enum.at(input, line_index)) - String.length(cur_num),
         length(Enum.at(input, line_index))
       ) do
      line_sum + full_num
    else
      line_sum
    end
end)
|> Enum.sum()
```

## Star 6

The missing part wasn't the only issue - one of the gears in the engine is wrong. A gear is any * symbol that is adjacent to exactly two part numbers. Its gear ratio is the result of multiplying those two numbers together.

This time, you need to find the gear ratio of every gear and add them all up so that the engineer can figure out which gear needs to be replaced.

Consider the same engine schematic again:

```
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
```

In this schematic, there are two gears. The first is in the top left; it has part numbers 467 and 35, so its gear ratio is 16345. The second gear is in the lower right; its gear ratio is 451490. (The * adjacent to 617 is not a gear because it is only adjacent to one part number.) Adding up all of the gear ratios produces 467835.

What is the sum of all of the gear ratios in your engine schematic?

```elixir
defmodule Day3Star2 do
  def is_integer?(str) do
    case Integer.parse(str) do
      {_, _} -> true
      _else -> false
    end
  end

  def gear_ratio(input, line_number, cell_index) do
    [
      input |> extract_line(line_number - 1) |> extract_cells(cell_index),
      input |> extract_line(line_number) |> extract_cells(cell_index),
      input |> extract_line(line_number + 1) |> extract_cells(cell_index)
    ]
    |> Enum.map(fn line ->
      line
      |> Enum.filter(&is_integer/1)
      |> Enum.uniq()
    end)
    |> List.flatten()
    |> then(fn
      [first, second] -> first * second
      _else -> 0
    end)
  end

  defp extract_line(_input, line_number) when line_number < 0, do: []
  defp extract_line(input, line_number) when line_number > length(input), do: []
  defp extract_line(input, line_number), do: Enum.at(input, line_number)

  defp extract_cells(nil, _cell_index), do: []

  defp extract_cells(line, cell_index) do
    Enum.slice(line, max(0, cell_index - 1)..(cell_index + 1))
  end
end

input =
  "input_day_3_2.txt"
  |> File.read!()
  |> String.split("\n")
  |> Enum.drop(-1)
  |> Enum.map(fn line ->
    line
    |> String.split("")
    |> Enum.slice(1..-2)
  end)
  |> Enum.map(fn line ->
    Enum.reduce(line, {[], ""}, fn cell, {res, cur_num} ->
      cond do
        Day3Star2.is_integer?(cell) ->
          {res, cur_num <> cell}

        cur_num != "" ->
          {cur_int, _} = Integer.parse(cur_num)

          {res ++
             Enum.map(Enum.to_list(1..String.length(cur_num)), fn _ -> cur_int end) ++ [cell], ""}

        true ->
          {res ++ [cell], ""}
      end
    end)
  end)
  |> Enum.map(fn
    {res, ""} ->
      res

    {res, cur_num} ->
      {cur_int, _} = Integer.parse(cur_num)
      res ++ Enum.map(Enum.to_list(1..String.length(cur_num)), fn _ -> cur_int end)
  end)

input
|> Enum.with_index()
|> Enum.map(fn {line, line_index} ->
  line
  |> Enum.with_index()
  |> Enum.reduce(0, fn {cell, cell_index}, line_sum ->
    if cell == "*" do
      line_sum + Day3Star2.gear_ratio(input, line_index, cell_index)
    else
      line_sum
    end
  end)
end)
|> Enum.sum()

# Day3Star2.gear_ratio(input, 8, 5)
# Day3Star2.gear_ratio(input, 1, 3)
```
