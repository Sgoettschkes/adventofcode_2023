# Day 3

## Star 5

The engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can add up all the part numbers in the engine schematic, it should be easy to work out which part is missing.

The engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don't really understand, but apparently any number adjacent to a symbol, even diagonally, is a "part number" and should be included in your sum. (Periods (.) do not count as a symbol.)

Here is an example engine schematic:

```
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
```

In this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.

Of course, the actual engine schematic is much larger. What is the sum of all of the part numbers in the engine schematic?

```elixir
defmodule Day3 do
  def is_integer?(str) do
    case Integer.parse(str) do
      {_, _} -> true
      _else -> false
    end
  end

  def borders_special_char(input, line_number, begin_cell, end_cell) do
    [
      input |> extract_line(line_number - 1) |> extract_cells(begin_cell, end_cell),
      input |> extract_line(line_number) |> extract_cells(begin_cell, end_cell),
      input |> extract_line(line_number + 1) |> extract_cells(begin_cell, end_cell)
    ]
    |> IO.inspect()
    |> List.flatten()
    |> Enum.join()
    |> then(&Regex.match?(~r/[^0-9|\.]/, &1))
  end

  defp extract_line(_input, line_number) when line_number < 0, do: []
  defp extract_line(input, line_number) when line_number > length(input), do: []
  defp extract_line(input, line_number), do: Enum.at(input, line_number)

  defp extract_cells(nil, _begin_cell, _end_cell), do: []

  defp extract_cells(line, begin_cell, end_cell) do
    Enum.slice(line, max(0, begin_cell - 1)..end_cell)
  end
end

input =
  "input_day_3_1.txt"
  |> File.read!()
  |> String.split("\n")
  |> Enum.drop(-1)
  |> Enum.map(fn line ->
    line
    |> String.split("")
    |> Enum.slice(1..-2)
  end)

input
|> Enum.with_index()
|> Enum.map(fn {line, line_index} ->
  line
  |> Enum.with_index()
  |> Enum.reduce({0, ""}, fn {cell, cell_index}, {line_sum, cur_num} = acc ->
    cond do
      Day3.is_integer?(cell) ->
        {line_sum, cur_num <> cell}

      cur_num != "" ->
        {full_num, _} = Integer.parse(cur_num)

        if Day3.borders_special_char(
             input,
             line_index,
             cell_index - String.length(cur_num),
             cell_index
           ) do
          {line_sum + full_num, ""}
        else
          {line_sum, ""}
        end

      true ->
        acc
    end
  end)
end)
|> Enum.with_index()
|> Enum.map(fn
  {{line_sum, ""}, _line_index} ->
    line_sum

  {{line_sum, cur_num}, line_index} ->
    {full_num, _} = Integer.parse(cur_num)

    if Day3.borders_special_char(
         input,
         line_index,
         length(Enum.at(input, line_index)) - String.length(cur_num),
         length(Enum.at(input, line_index))
       ) do
      line_sum + full_num
    else
      line_sum
    end
end)
# |> Enum.map(&IO.inspect/1)
|> Enum.sum()

# Day3.borders_special_char(input, 96, 10, 11)
```
