# Day 14

## Star 27

In short: if you move the rocks, you can focus the dish. The platform even has a control panel on the side that lets you tilt it in one of four directions! The rounded rocks (O) will roll when the platform is tilted, while the cube-shaped rocks (#) will stay in place. You note the positions of all of the empty spaces (.) and rocks (your puzzle input). For example:

```
O....#....
O.OO#....#
.....##...
OO.#O....O
.O.....O#.
O.#..O.#.#
..O..#O..O
.......O..
#....###..
#OO..#....
```

Start by tilting the lever so all of the rocks will slide north as far as they will go:

```
OOOO.#.O..
OO..#....#
OO..O##..O
O..#.OO...
........#.
..#....#.#
..O..#.O.O
..O.......
#....###..
#....#....
```

You notice that the support beams along the north side of the platform are damaged; to ensure the platform doesn't collapse, you should calculate the total load on the north support beams.

The amount of load caused by a single rounded rock (O) is equal to the number of rows from the rock to the south edge of the platform, including the row the rock is on. (Cube-shaped rocks (#) don't contribute to load.) So, the amount of load caused by each rock in each row is as follows:

```
OOOO.#.O.. 10
OO..#....#  9
OO..O##..O  8
O..#.OO...  7
........#.  6
..#....#.#  5
..O..#.O.O  4
..O.......  3
#....###..  2
#....#....  1
```

The total load is the sum of the load caused by all of the rounded rocks. In this example, the total load is 136.

Tilt the platform so that the rounded rocks all roll north. Afterward, what is the total load on the north support beams?

```elixir
defmodule Day14Star27 do
  def count_line(line) do
    count_line(line, length(line))
  end

  def count_line([], _cur_pos), do: 0
  def count_line(["."], _cur_pos), do: 0

  def count_line(["." | tail], cur_pos) do
    case search_and_replace(tail) do
      ^tail -> count_line(tail, cur_pos - 1)
      new_tail -> cur_pos + count_line(new_tail, cur_pos - 1)
    end
  end

  def count_line(["#" | tail], cur_pos), do: count_line(tail, cur_pos - 1)

  def count_line(["O" | tail], cur_pos) do
    cur_pos + count_line(tail, cur_pos - 1)
  end

  defp search_and_replace([]), do: []
  defp search_and_replace(["O" | tail]), do: ["." | tail]
  defp search_and_replace(["." | tail]), do: ["." | search_and_replace(tail)]
  defp search_and_replace(["#" | tail]), do: ["#" | tail]
end

"input_day_14_2.txt"
|> File.read!()
|> String.split("\n", trim: true)
|> Enum.map(&String.split(&1, "", trim: true))
|> Enum.zip()
|> Enum.map(&Tuple.to_list/1)
|> Enum.map(&Day14Star27.count_line/1)
|> Enum.sum()

# Day14Star27.count_line(["O", "O", ".", "O", ".", "O", ".", ".", "#", "#"])
```

## Star 28

The parabolic reflector dish deforms, but not in a way that focuses the beam. To do that, you'll need to move the rocks to the edges of the platform. Fortunately, a button on the side of the control panel labeled "spin cycle" attempts to do just that!

Each cycle tilts the platform four times so that the rounded rocks roll north, then west, then south, then east. After each tilt, the rounded rocks roll as far as they can before the platform tilts in the next direction. After one cycle, the platform will have finished rolling the rounded rocks in those four directions in that order.

Here's what happens in the example above after each of the first few cycles:

```
After 1 cycle:

.....#....
....#...O#
...OO##...
.OO#......
.....OOO#.
.O#...O#.#
....O#....
......OOOO
#...O###..
#..OO#....

After 2 cycles:
.....#....
....#...O#
.....##...
..O#......
.....OOO#.
.O#...O#.#
....O#...O
.......OOO
#..OO###..
#.OOO#...O

After 3 cycles:
.....#....
....#...O#
.....##...
..O#......
.....OOO#.
.O#...O#.#
....O#...O
.......OOO
#...O###.O
#.OOO#...O
```

This process should work if you leave it running long enough, but you're still worried about the north support beams. To make sure they'll survive for a while, you need to calculate the total load on the north support beams after 1000000000 cycles.

In the above example, after 1000000000 cycles, the total load on the north support beams is 64.

Run the spin cycle for 1000000000 cycles. Afterward, what is the total load on the north support beams?

```elixir
if :ets.info(:cache) != :undefined do
  :ets.delete(:cache)
end

:ets.new(:cache, [:set, :protected, :named_table])

defmodule Day14Star28 do
  def cycles(lines, amount, cache \\ [])

  def cycles(_lines, 0, cache) do
    hd(cache)
  end

  def cycles(lines, amount, cache) do
    res = cycle(lines)

    case Enum.find_index(Enum.reverse(cache), &(&1 == res)) do
      nil ->
        cycles(res, amount - 1, [res | cache])

      index ->
        {_, loop} =
          cache
          |> Enum.reverse()
          |> Enum.split(index)

        Enum.at(loop, rem(amount - 1, length(loop)))
    end
  end

  def count(lines), do: count(lines, length(lines))
  def count([], _cur_pos), do: 0

  def count([hd | tail], cur_pos) do
    amount =
      hd
      |> Enum.filter(fn char -> char == "O" end)
      |> Enum.count()

    amount * cur_pos + count(tail, cur_pos - 1)
  end

  defp cycle(lines, amount \\ 4)
  defp cycle(lines, 0), do: lines

  defp cycle(lines, amount) do
    lines
    |> cache(&rotate_and_tilt/1)
    |> cycle(amount - 1)
  end

  defp rotate_and_tilt(lines) do
    lines
    |> rotate()
    |> Enum.map(fn line ->
      line
      |> Enum.reverse()
      |> cache(&tilt/1)
      |> Enum.reverse()
    end)
  end

  defp rotate(lines) do
    lines |> Enum.zip() |> Enum.map(&Tuple.to_list/1) |> Enum.map(&Enum.reverse/1)
  end

  defp tilt([]), do: []

  defp tilt(["." | tail]) do
    case search_and_replace(tail) do
      ^tail -> ["." | tilt(tail)]
      new_tail -> ["O" | tilt(new_tail)]
    end
  end

  defp tilt([char | tail]), do: [char | tilt(tail)]

  defp search_and_replace([]), do: []
  defp search_and_replace(["O" | tail]), do: ["." | tail]
  defp search_and_replace(["." | tail]), do: ["." | search_and_replace(tail)]
  defp search_and_replace(["#" | tail]), do: ["#" | tail]

  defp cache(input, fun) do
    case :ets.lookup(:cache, {input, fun}) do
      [] ->
        result = fun.(input)
        :ets.insert(:cache, {{input, fun}, result})

        result

      [{_, result}] ->
        result
    end
  end
end

"input_day_14_2.txt"
|> File.read!()
|> String.split("\n", trim: true)
|> Enum.map(&String.split(&1, "", trim: true))
|> Day14Star28.cycles(1_000_000_000)
|> Day14Star28.count()
```
